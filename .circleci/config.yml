version: 2.1

orbs:
  slack: circleci/slack@4.2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      WORKFLOW_ID:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          # force exit code 0 so both commands will be executed (in case one stack exists and the other not...)
          command: |
            echo "delete stacks... (term: $TERM)"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${WORKFLOW_ID:0:7}" || true
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${WORKFLOW_ID:0:7}" || true

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
      someParameter:
        type: string
        default: "FooBar"
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-fresh]
      - run:
          name: Build front-end
          command: |
            cd frontend
            exit 0
            npm install
            npm run build:prod
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-fresh

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-fresh]
      - run:
          name: Back-end build
          command: |
            cd backend
            exit 0
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-fresh

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      #- checkout
      - restore_cache:
          keys: [frontend-build-fresh]
      - run:
          name: Test frontend
          command: |
            cd frontend
            exit 0
            npm run test:cov
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      #- checkout
      - restore_cache:
          keys: [backend-build-fresh]
      - run:
          name: Test backend
          command: |
            cd backend
            exit 0
            npm run test:cov
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      #- checkout
      - restore_cache:
          keys: [frontend-build-fresh]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            exit 0
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      #- checkout
      - restore_cache:
          keys: [backend-build-fresh]
      - run:
          name: Scan backend
          command: |
            cd backend
            exit 0
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:2.1.22
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            exit 0
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople projectenv=backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            exit 0
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople projectenv=frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            yum -y install tar gzip
            echo "[web]" > ~/inventory.txt
            aws ec2 describe-instances --filters "Name=tag:project,Values=udapeople" --filters "Name=tag:projectenv,Values=backend" --query 'Reservations[].Instances[].PublicDnsName' --output text | awk '{ print $1}' >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - destroy-environment:
          WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID}"

  configure-infrastructure:
    docker:
      - image: willhallonline/ansible:2.9-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "49:88:cd:72:f1:95:52:31:35:91:d3:04:96:59:16:a7"
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cd .circleci/ansible
            exit 0
            ansible-playbook -i /tmp/workspace/inventory.txt  configure-server.yml -e 'TYPEORM_HOST=${TYPEORM_HOST} TYPEORM_DATABASE=${TYPEORM_DATABASE} TYPEORM_PORT=${TYPEORM_PORT} TYPEORM_USERNAME=${TYPEORM_USERNAME} TYPEORM_PASSWORD=${TYPEORM_PASSWORD}'
      - destroy-environment:
          WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-fresh]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations | tee /tmp/migrations.log
      - run:
          name: Send migration results to memstash
          when: always
          command: |
            if grep -q "has been executed successfully" /tmp/migrations.log ; then
              curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
      - destroy-environment:
          WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID}"
  deploy-frontend:
    docker:
      - image: amazon/aws-cli:2.1.22
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: python:3.9-alpine3.12
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
            # install ansible
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: alpine:3.13
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli:2.1.22
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: alpine:3.13
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]